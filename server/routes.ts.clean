// Create partial routes.ts with the onboarding-trial endpoint fixed
import express, { type Express, type Request } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { db } from "./db";
import { setupAuth, isAuthenticated } from "./replitAuth";
import { isAdmin, isAccountOwner, isMasterAdmin } from "./middleware/roleMiddleware";
import { sendDonationNotification, testSendGridConfiguration, sendWelcomeEmail, sendPasswordResetEmail, sendCountReport } from "./sendgrid";
import { sendVerificationEmail, verifyCode } from "./verification";
import { setupTestEndpoints } from "./test-endpoints";
import { setupPlanningCenterRoutes } from "./planning-center";
import { requireGlobalAdmin, restrictSuspendedChurchAccess } from "./middleware/globalAdminMiddleware";
import globalAdminRoutes from "./api/globalAdmin";
import { eq, sql, and, or, inArray } from "drizzle-orm";
import * as crypto from "crypto";
import * as fs from "fs";
import * as path from "path";
import { generateCountReportPDF } from "./pdf-generator";
import Stripe from "stripe";
import { createTrialSubscriptionForOnboarding } from "./subscription-helper";
import { 
  subscriptions, 
  subscriptionStatusEnum, 
  subscriptionPlanEnum, 
  type Subscription, 
  type InsertSubscription 
} from "@shared/schema";

// 4488-4518 - Properly implement onboarding-trial endpoint
export async function registerRoutes(app: Express): Promise<Server> {
  // ... (earlier code)

  // Create a trial subscription during onboarding (no auth required)
  app.post('/api/subscription/onboarding-trial', async (req, res) => {
    try {
      const { churchId, churchName } = req.body;
      
      if (!churchId) {
        return res.status(400).json({ message: 'Church ID is required' });
      }
      
      // Use the helper function that ensures church exists before subscription
      const subscription = await createTrialSubscriptionForOnboarding(
        storage, 
        churchId,
        churchName
      );
      
      res.status(201).json(subscription);
    } catch (error) {
      console.error('Error creating trial subscription during onboarding:', error);
      res.status(500).json({ 
        message: error instanceof Error ? error.message : 'Error creating trial subscription'
      });
    }
  });

  // Handle Stripe webhook events
  app.post('/api/stripe-webhook', express.raw({ type: 'application/json' }), async (req, res) => {
    const signature = req.headers['stripe-signature'];
    
    if (!signature) {
      return res.status(400).send('Missing Stripe signature');
    }
    
    let event;
    
    try {
      const payload = req.body;
      const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;
      
      // Verify the event came from Stripe
      if (endpointSecret) {
        event = stripe.webhooks.constructEvent(payload, signature, endpointSecret);
      }
    
      // ... rest of webhook code
    } catch (error) {
      console.error('Stripe webhook error:', error);
      return res.status(400).json({ message: 'Stripe webhook error' });
    }
  });
  
  // ... (rest of the code)

  const httpServer = createServer(app);
  return httpServer;
}